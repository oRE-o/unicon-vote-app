name: CI/CD with Docker Compose

on:
  push:
    branches: [ "main" ]

env:
  DOCKER_IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/unicon-vote-backend
  DOCKER_IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/unicon-vote-frontend

jobs:
  # --- 백엔드 빌드 및 푸시 잡 (변경 없음) ---
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./unicon-vote-backend
          push: true
          tags: ${{ env.DOCKER_IMAGE_BACKEND }}:latest

  # --- 프론트엔드 빌드 및 푸시 잡 (API_BASE_URL 전달하도록 수정) ---
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./unicon-vote-frontend
          push: true
          tags: ${{ env.DOCKER_IMAGE_FRONTEND }}:latest
          # --- 👇 프론트엔드 빌드 시 API_BASE_URL 환경변수 전달 ---
          # 배포될 서버의 IP를 VITE_API_BASE_URL로 주입
          build-args: |
            VITE_API_BASE_URL=http://${{ secrets.SERVER_HOST }}:5001
            # 💡 중요: 서버 IP를 사용하세요. EC2에 도메인을 연결했다면 도메인으로.

  # --- 서버에 배포하는 잡 (CD) - Docker Compose 사용하도록 변경 ---
  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # docker-compose.yml 파일 가져오기

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 서버에 접속하여 Docker Hub 로그인
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # GitHub 저장소에서 docker-compose.yml 파일을 서버로 복사
            # (actions/checkout으로 워크플로우에 docker-compose.yml이 존재)
            # cp /home/runner/work/<repo_name>/<repo_name>/docker-compose.yml /tmp/docker-compose.yml
            # 이 워크플로우는 .github/workflows/main.yml이 위치한 레포의 루트에서 실행되므로,
            # docker-compose.yml이 루트에 있다면 경로가 '.'이 됩니다.
            
            # Docker Compose 실행 전 필요한 환경 변수 설정
            # Docker Compose는 .env 파일이 없으면 쉘 환경 변수를 사용합니다.
            export MONGO_URI="${{ secrets.MONGO_URI }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export ADMIN_UUID="${{ secrets.ADMIN_UUID }}"
            export ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
            
            # Docker Compose를 이용해 모든 서비스(backend, frontend, mongo) 실행
            # -f: docker-compose 파일 지정
            # pull: 최신 이미지 다운로드
            # up -d: 백그라운드에서 서비스 시작 (없으면 생성, 있으면 재시작/업데이트)
            # --build: 필요시 로컬에서 이미지 다시 빌드 (여기서는 Docker Hub에서 풀 받으니 필요 없음)
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d
            
            echo "Deployment completed successfully!"